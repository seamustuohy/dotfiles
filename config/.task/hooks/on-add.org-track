#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright Â© 2017 seamus tuohy, <code@seamustuohy.com>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the included LICENSE file for details.


# INSTALL
# https://github.com/bjonnh/PyOrgMode
# ````
# git clone https://github.com/bjonnh/PyOrgMode.git
# cd PyOrgMode/
# sudo python setup.py install
# ````


# TO SETUP and RUN
# Place in ~/.task/hooks/
# Set execute permissions
# ```
# chmod +x ~/.task/hooks/on-add.org-track
# ```
# Set envrionment variable ORG_TIMEW_FILE to the path of your org file.
# create org file
# add all existing tasks to the org file
# ```
# on-add.org-track -c
# ```


import argparse
import logging
import sys
import json
from os import path, getenv
from tempfile import gettempdir
from PyOrgMode import PyOrgMode
from datetime import datetime


def main(org_path):
    original = sys.stdin.readline()
    new = json.loads(original)
    base = get_orgfile(org_path)
    project = get_or_create_project(new.get("project", "Misc"), base)
    node = create_node(new)
    project.append_clean(node)
    write_orgfile(base, org_path)
    print(original)


def get_or_create_project(name, base):
    found = None
    for node in base.root.content:
        if node.heading == name:
            return node
    if found is None:
        node = PyOrgMode.OrgNode.Element()
        node.heading = name
        base.root.append_clean(node)
        return node


def get_orgfile(org_path):
    if org_path is None:
        org_path = get_org_path()
    base = PyOrgMode.OrgDataStructure()
    base.load_from_file(path.abspath(org_path))
    return base


def get_org_path():
    env_path = getenv('ORG_TIMEW_FILE')
    if env_path is None:
        raise NameError("The path to an org file was not provided over the command line (--org_path) or set in an env variable (ORG_TIMEW_FILE). You must do one of these so we know what org file to write to.")
    return env_path


def write_orgfile(base, org_path):
    if org_path is None:
        org_path = get_org_path()
    base.save_to_file(path.abspath(org_path))


def create_node(new):
    node = PyOrgMode.OrgNode.Element()

    if "status" in new:
        node.todo = new['status'].upper()

    if "description" in new:
        node.heading = new["description"] + "\t"

    if 'tags' in new:
        node.tags = new['tags']

    _props = PyOrgMode.OrgDrawer.Element("PROPERTIES")
    _log = PyOrgMode.OrgDrawer.Element("LOGBOOK")

    if 'project' in new:
        _props.append(PyOrgMode.OrgDrawer.Property("PROJECT", new['project']))

    if "uuid" in new:
        _props.append(PyOrgMode.OrgDrawer.Property("UUID", new["uuid"]))

    if "entry" in new:
        dateordatetime = datetime.strptime(new["entry"], "%Y%m%dT%H%M%SZ")
        entry_date = format_as_org_datetime(dateordatetime, active=False)
        _props.append(PyOrgMode.OrgDrawer.Property("ENTERED", entry_date))
        _log.append(PyOrgMode.OrgDrawer.Property("CREATED", entry_date))

    if "modified" in new:
        dateordatetime = datetime.strptime(new["modified"], "%Y%m%dT%H%M%SZ")
        mod_date = format_as_org_datetime(dateordatetime, active=False)
        _props.append(PyOrgMode.OrgDrawer.Property("MODIFIED", mod_date))

    node.content.append(_props)
    node.content.append(_log)
    return node


def format_as_org_datetime(dateordatetime, active=True):
    """transform a timewarrior timestamp to a date or datetime object in org-format
    """
    encl = "<{0}>" if active else "[{0}]"
    try:
        dateordatetime.time()  # check if a datetime
        return encl.format(dateordatetime.strftime("%Y-%m-%d %a %H:%M"))
    except:
        return encl.format(dateordatetime.strftime("%Y-%m-%d %a"))


def convert_all(org_path):
    """Pipe `task export` to this to create your first org file
    """
    base = get_orgfile(org_path)
    base.todo_list = ['PENDING', 'WAITING']
    base.done_list = ['COMPLETED', 'DELETED']
    for original in sys.stdin:
        try:
            new = json.loads(original.strip().strip(","))
        except json.decoder.JSONDecodeError:
            continue
        project = get_or_create_project(new.get("project", "Misc"), base)
        node = create_node(new)
        project.append_clean(node)
    write_orgfile(base, org_path)


def set_logging(verbose=False, debug=False):
    if debug is True:
        log.setLevel("DEBUG")


def parse_arguments():
    parser = argparse.ArgumentParser("Taskwarrior hook to add tasks to an org file.")
    parser.add_argument("--debug", "-d",
                        help="Turn debugging on",
                        action='store_true')
    parser.add_argument("--convert_all", "-c",
                        help="Convert all existing tasks into the org mode file.",
                        action='store_true')
    parser.add_argument("--org_path", "-f",
                        help="""Path of org-mode output file. This can also be set in the environment variable `ORG_TIMEW_FILE`.""")
    args, unknown = parser.parse_known_args()
    return args


if __name__ == '__main__':
    logfilename = path.join(gettempdir(), "org-timew-hooks.log")
    logging.basicConfig(filename=logfilename, level=logging.ERROR)
    log = logging.getLogger(__name__)
    args = parse_arguments()
    if args.convert_all is True:
        convert_all(args.org_path)
    else:
        main(args.org_path)
